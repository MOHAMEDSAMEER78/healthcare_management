# docker-compose.yml
version: "3.8"
services:
  zookeeper:
    restart: always
    image: docker.io/bitnami/zookeeper:3.8
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper-volume:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    restart: always
    image: docker.io/bitnami/kafka:3.3
    ports:
      - "9093:9093"
    volumes:
      - "kafka-volume:/bitnami"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper
  edge_node:
    build:
      context: .
      dockerfile: edge_node/Dockerfile.edge
    ports:
      - "8100:8000"
    environment:
      - DJANGO_ENV=development
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - POSTGRES_DB=healthcare_db
      - POSTGRES_USER=healthcare_user
      - POSTGRES_PASSWORD=healthcare_password
      - POSTGRES_HOST=db
    depends_on:
      - kafka
      - zookeeper
    restart: unless-stopped

  edge_node_2:
    build:
      context: .
      dockerfile: edge_node/Dockerfile.edge
    ports:
      - "8101:8000"
    environment:
      - DJANGO_ENV=development
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - POSTGRES_DB=healthcare_db
      - POSTGRES_USER=healthcare_user
      - POSTGRES_PASSWORD=healthcare_password
      - POSTGRES_HOST=db
    depends_on:
      - kafka
      - zookeeper
    restart: unless-stopped

  edge_node_3:
    build:
      context: .
      dockerfile: edge_node/Dockerfile.edge
    ports:
      - "8103:8000"
    environment:
      - DJANGO_ENV=development
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - POSTGRES_DB=healthcare_db
      - POSTGRES_USER=healthcare_user
      - POSTGRES_PASSWORD=healthcare_password
      - POSTGRES_HOST=db
    depends_on:
      - kafka
      - zookeeper
    restart: unless-stopped

  central_node:
    build:
      context: .
      dockerfile: central_edge_node/Dockerfile.central
    ports:
      - "8001:8001"
    environment:
      - DJANGO_ENV=development
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - POSTGRES_DB=healthcare_db
      - POSTGRES_USER=healthcare_user
      - POSTGRES_PASSWORD=healthcare_password
      - POSTGRES_HOST=db
    depends_on:
      - edge_node
    restart: unless-stopped
    volumes:
      - ./central_node/db.sqlite3:/app/db/db.sqlite3

  central_node_kafka_consumer:
    build:
      context: .
      dockerfile: central_edge_node/Dockerfile.kafka_consumer
    environment:
      - DJANGO_ENV=development
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - POSTGRES_DB=healthcare_db
      - POSTGRES_USER=healthcare_user
      - POSTGRES_PASSWORD=healthcare_password
      - POSTGRES_HOST=db
    depends_on:
      - central_node
    restart: unless-stopped
    volumes:
      - ./central_node/db.sqlite3:/app/db/db.sqlite3:shared

  cloud_server:
    build:
      context: .
      dockerfile: cloud_server/Dockerfile.cloud
    ports:
      - "8002:8002"
    environment:
      - DJANGO_ENV=development
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - POSTGRES_DB=healthcare_db
      - POSTGRES_USER=healthcare_user
      - POSTGRES_PASSWORD=healthcare_password
      - POSTGRES_HOST=db
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
    depends_on:
      - central_node
      - elasticsearch
    restart: unless-stopped
    networks:
      - default
      - elastic

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.3
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
    ports:
      - "9200:9200"
    volumes:
      - elasticvolume:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200 >/dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - default
      - elastic

  logstash:
    image: docker.elastic.co/logstash/logstash:8.7.0
    build: 
      context: ./cloud_server/logstash
      dockerfile: Dockerfile
    volumes:
      - logstashvolume:/usr/share/logstash/data
    environment:
      - LS_JAVA_OPTS=-Xms256m -Xmx256m
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
      - CONFIG_SUPPORT_ESCAPE=true
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy
      db:
        condition: service_started
    networks:
      - default
      - elastic
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9600 >/dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:13
    environment:
      POSTGRES_DB: healthcare_db
      POSTGRES_USER: healthcare_user
      POSTGRES_PASSWORD: healthcare_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - /usr/share/java:/usr/share/java

networks:
  default:
    driver: bridge
  elastic:
    driver: bridge

volumes:
  kafka-volume:
  zookeeper-volume:
  central_node_db:
  postgres-data:
  elasticvolume:
  logstashvolume: